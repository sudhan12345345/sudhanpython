# -*- coding: utf-8 -*-
"""python lab.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17XGYLrvUqJb-JKbIX3k85MwOW9-xV3Jw
"""

#Ex1 Data Types & Data Structures
#1 integer
x=25
print(x)
print(type(x))

#2 float
dt_dec=9.0
print(dt_dec)
print(type(dt_dec))

#3 string
dt_txt=" i am okay "
print(dt_txt)
print(type(dt_txt))
print(dt_txt.lower())
print(dt_txt.upper())
print(dt_txt.replace('am','am not'))

#ex3 OOPS Concepts: Functions &amp; Inheritance
#1 quiz using functions
class Question:
  def __init__(self,prompt,answer):
    self.prompt = prompt
    self.answer = answer
question_prompts = [
      "Which list is in alphabet order? \n a)abcd\n b)bcad\n c)acdb\n d)cabd\n\n",
      "Opposite for north? \n a)south\n b)east\n c)west\n d)north\n\n", 
      "Opposite for dark?\n a)small\n b)night\n c)light\n d)big\n\n",
      "opposite for up?\n a)large\n b)down\n c)thin\n d)on\n\n",
      "Which letter comes between X and Z?\n a)N\n b)Q\n c)P\n d)Y\n\n",
]
questions = [
      Question(question_prompts[0],"a"),
      Question(question_prompts[1],"a"),
      Question(question_prompts[2],"c"),
      Question(question_prompts[3],"b"),
      Question(question_prompts[4],"d"),
]
def run_quiz(questions):
  score = 0
  for question in questions:
    answer= input(question.prompt)
    if answer == question.answer:
      score += 2
    else:
      score -= 1

      print("Your Score is:",score)
run_quiz(questions)

#4 Typecasting
tc_mark1=87
tc_mark2=90
tc_mark3=78
tc_mark4=81
tc_mark5=73
tc_average=(tc_mark1+tc_mark2+tc_mark3+tc_mark4+tc_mark5)/5
print("the average mark is",tc_average)
type(tc_average)

#5 list
name=['dugra','jaya','jo','siva','yoga']
gender=['female','female','male','male','female']
age=[20,21,19,21,22]  
register_no=[152,145,4527,1435,345]
nationality=['true','true','false','false','true']
list=[name,gender,age,register_no,nationality]
print(list)
print(len(name))
age.append(23)
print(age)
gender.extend(['male','female'])
print(gender)
del(register_no[4])
print(register_no)
detail=name+gender+age
print(detail)
x='m'
if x in gender:
  print("end")
else:
  print("no end")

#6 tuples
my_data=(1235,'jo','son',7.6,7.6)
print(my_data)
print(my_data[0])
print(my_data[0:2])
a=my_data.count(7.6)
print(a)
b=my_data.index('jo')
print(b)

#7 dictionary
wt_corpa={'app':'apple','edu':'education','gd':'good','bd':'bad','py':'python'}
print(wt_corpa)
print(wt_corpa.keys())
print(wt_corpa['bd'])
del(wt_corpa['bd'])
wt_corpa['hy']='happy'
print(wt_corpa)

#2CONDITIONAL STATEMENTS AND LOOPING
#1 Electricity Bill

units=int(input("Number of Units Consumed:"))
if units>=0 and units<=100:
  price=units*0.50 
elif units>=101 and units<=200:
  price=units*0.75
elif units>=201 and units<=300:
  price=units*1.20
else:
  price=units*1.50
print("Select '1' or '2':")
ch=0
while ch==0:
  ch=int(input("Enter '1' for HouseHold or '2' for Commercial:" ))
  if ch==1:
    print("Electricity Bill for HouseHold:",price)
  elif ch==2:
    print("Electricity Bill for Commercial:",price*2)
  else:
    print("Worng Choice")

#2 Calculate the Gross Salary and Net Salary
print("Get Basic Salary of Employee")
bs=int(input("Basic Salary of Employee : "))
da=bs*0.20
hra=bs*0.10
pf=bs*0.12
ta=bs*7.50
emi=bs*0.2
gs=bs+da+hra+ta
ns=gs-pf-emi
print("net salary : ",ns)
print("gross salary : ",gs)

#ex 4
#1 Data Manipulation Using Pandas
#1 Create a dataframe
import pandas as pd
data =pd.DataFrame({'Name':['Anand', 'Jo', 'Raja', 'Ram','Siva'],
                    'Father Name':['Bala', 'Guru','Deva', 'Maha','Joan'],
                    'D.O.B':[2000, 1990, 1998, 1999,1993],})
df = pd.DataFrame(data)
df["Age"]=2022-df["D.O.B"]
df['Father Age']=2*df["Age"]
df['Category']=df['Age'].apply (lambda x:'Major' if x>58 else 'Minor')
print(df)

#2 Select columns with specific data types
columns = df.select_dtypes(include=['int'])
print(columns,'\n')

#3 Slicing the dataframe
print(df.loc[0:4,"Name":"Age"],'\n')

#4 Select specific values in the column
print(df.iloc[2:4,2:4],'\n')

#5 Group by Age
print(df.groupby(['Name','Age']).groups)

#6 Map with dataframe
df['Graduate']=df['Age'].map(lambda x: 'Yes' if x>22 else 'No')
print(df['Graduate'])

#7 Rename the column name
df.rename(columns = {'Graduate':'Worker'},inplace=True)
df

#8 Drop columns &amp; rows in the dataframe
df.drop(df.index[1:3], inplace=True)
df.drop(['Name'], axis=1,inplace=True)
print(df)

#9 Write/Read as CSV file
df.to_csv('/content/drive/MyDrive/data.csv')
data_df=pd.read_csv('/content/drive/MyDrive/data.csv')
display(data_df)